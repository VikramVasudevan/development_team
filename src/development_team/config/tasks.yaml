design_task:
  description: >
    Take the high level requirements described here and prepare a detailed design for the engineer;
    everything should be in 1 python module, but outline the classes and methods in the module.
    Here are the requirements: {requirement}
    IMPORTANT: Only output the design in markdown format, laying out in detail the classes and functions in the module, describing the functionality.
  expected_output: >
    A detailed design for the engineer, identifying the classes and functions in the module.
  agent: development_lead
  output_file: output/{module_name}_design.md

backend_coding_task:
  description: >
    Based on the backend design provided by the design task, write crisp code in python for a given requirement. make sure to address only the backend requirements using Gradio.
    No clutter and unnecessary commentary please. just the python that we can save as a py file and execute directly should be good enough.
    The requirement is this:
     {requirement}
  expected_output: >
    A python file containing the backend code for the given requirement.
  agent: backend_engineer
  output_file: output/{module_name}.py
  context:
    - design_task

code_review_task:
  description: >
    Review the python code provided by the backend engineer and ensure it is done according to the design provided by the development lead. 
    Just output pure Markdown only. no ```markdown
    The requirement is this : {requirement}
  expected_output: >
    A code review document in markdown format detailing what was reviewed and what is the outcome.
  agent: code_reviewer
  output_file: output/{module_name}_code_review.md
  context:
    - design_task
    - backend_coding_task

backend_code_rewrite_task:
  description: >
    Incorporate the comments from the code review  task and rewrite the original backend code accordingly.

    IMPORTANT: Only modify the backend code. Do not include any Gradio, UI, or Flask elements.
    The backend module name is {module_name}_improved.
    The requirement is: {requirement}
  expected_output: >
    A python file containing the improved backend code.
  agent: backend_engineer
  output_file: output/{module_name}_improved.py
  context:
    - design_task
    - backend_coding_task
    - code_review_task

code_review_task_2:
  description: >
    Review the python code rewritten by the backend engineer and ensure it is done according to the design provided by the development lead and it incorporates the comments you had provided earlier (if any). 
    Just output pure Markdown only. no ```markdown
    The requirement is this : {requirement}
  expected_output: >
    A code review document detailing what was reviewed and what is the outcome.
  agent: code_reviewer
  output_file: output/{module_name}_code_review_2.md
  context:
    - design_task
    - code_review_task
    - backend_coding_task
    - backend_code_rewrite_task

testing_task:
  description: >
    Write comprehensive unit test cases for the oode written by the backend engineer for the given requirement. 
    The requirement is this : {requirement}
  expected_output: >
    A python file containing the code with unit test cases for the given requirement.
  agent: test_engineer
  output_file: output/{module_name}_test.py
  context:
    - backend_code_rewrite_task


frontend_development_task:
  description: >
    Create nice and simple UI for the given requirement usin Gradio. Make sure to import the module written by the backend engineer in your interface for backend calls. Do not copy the same code into your code. Refer to it.
    The backend module name is {module_name}_improved
    The requirement is this : {requirement}
  expected_output: >
    A python file containing the UI code for the given requirement.
  agent: frontend_engineer
  output_file: output/{module_name}_ui.py
  context:
    - backend_code_rewrite_task
    - design_task
